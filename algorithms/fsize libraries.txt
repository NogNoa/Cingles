Dirent exist in /usr/include/dirent.h as struct dirent (low case)
it has numeric values: d_ino d_off d_reclen and d_type; and string value d_name. dype is unsigned char.
Since the name don't clash we theoreticaly can use both this and 
KnR's Direct that has long ino and string name. But buildin functions of course gonna
return struct dirent.

struct dirent
  {
#ifndef __USE_FILE_OFFSET64
    __ino_t d_ino;
    __off_t d_off;
#else
    __ino64_t d_ino;
    __off64_t d_off;
#endif
    unsigned short int d_reclen;
    unsigned char d_type;
    char d_name[256];		/* We must not include limits.h! */
  };

DIR is an opaque structure __dirstream. We can only define a pointer to DIR, and get it from opendir()
DIR is a structure that has numeric {fd, lock, allocation, size, offset, fileops, errcode} and pointer data to unsigned char.

opendir closedir and readir are mostly like in Knr. closedir doth return an exit status int.

extern DIR *opendir (const char *__name) __nonnull ((1));
extern int closedir (DIR *__dirp) __nonnull ((1));
extern struct dirent *readdir (DIR *__dirp) __nonnull ((1));

in /usr/include/x86_64-linux-gnu/sys/stat.h we find the stat function

extern int stat (const char *__restrict __file,
		 struct stat *__restrict __buf) __THROW __nonnull ((1, 2));

much more complecated. but it takes and returns the same types.

last header is types the masks the we need are actually not in any type.h header but in the stat header as well


#define	__S_IFMT	0170000	/* These bits determine file type.  */

/* File types.  */
#define	__S_IFDIR	0040000	/* Directory.  */
#define	__S_IFCHR	0020000	/* Character device.  */
#define	__S_IFBLK	0060000	/* Block device.  */
#define	__S_IFREG	0100000	/* Regular file.  */
#define	__S_IFIFO	0010000	/* FIFO.  */
#define	__S_IFLNK	0120000	/* Symbolic link.  */
#define	__S_IFSOCK	0140000	/* Socket.  */

the __S_IFMT is the only diffrent one from 0160000, there are also one don't mentioned in the book. also they start but this is aliased to the __-less in fcntl.h


